#! /usr/bin/env python3

# ------------------------------------------------------------------------------
# MIT License
#
# Copyright (c) 2018 whythat <whythat@protonmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# ------------------------------------------------------------------------------
# README
#
# TODO(whythat): add


import argparse
import requests

from os import path


# ------------------------------------------------------------------------------
# CLI implementation
description = """
Library manager for automating boring tasks that uses git repository as a
library with metadata stored in commit objects.
"""

cli = argparse.ArgumentParser('libman', description=description)
subparsers = cli.add_subparsers(dest='subcommand', title='commands')


def subcommand(*args):
    """Register a function as a subcommand with given arguments"""
    def decorator(f):
        parser = subparsers.add_parser(f.__name__, help=f.__doc__)
        for arg in args:
            parser.add_argument(*arg[0], **arg[1])
        parser.set_defaults(func=f)
    return decorator


def arg(*args, **kwargs):
    """Construct argument description from a args/kwargs"""
    return (list(args), kwargs)


# ------------------------------------------------------------------------------
# Commands
@subcommand(arg('-f', '--file', help='File to add to the library'))
def add(args):
    """Add a new file to the library"""
    print('not implemented')


@subcommand(arg('-f', '--file', help='Name-normalized book file to lookup'),
            arg('-t', '--title', help='Title of the book to lookup'),
            arg('-a', '--author', help='Author name to lookup'),
            arg('-y', '--year', help='Year of publication to lookup'),
            arg('-c', '--commit', action='store_true',
                help='Format book info as a commit message'))
def info(args):
    """Lookup given book info on the known book resources"""
    argmap = vars(args)
    if argmap.get('file'):
        t, a, y = parse_filename(argmap['file'])
    else:
        t, a, y = (argmap.get(x) for x in ('title', 'author', 'year'))
    title, description = LookupEngine().info(t, a, y)[0]
    format_string = '[BOOK] {}\n\n{}' if args.commit else 'title:     {}\n{}'
    print(format_string.format(title, description))


@subcommand(arg('phrase', help='Phrase to use as a lookup seed'),
            arg('-e', '--entries', help='Number of entries to display'))
def lookup(args):
    """Lookup possible entries for a given book file"""
    argmap = vars(args)
    entries = LookupEngine().lookup(argmap['phrase'])
    enum = argmap.get('entries')
    if enum is None:
        enum = len(entries)
    for title, description in entries[:int(enum)]:
        print('title:     {}\n{}\n'.format(title, description))


@subcommand(arg('file', help='Filename to rename'),
            arg('-l', '--lookup', help='Lookup phrase to search for'),
            arg('-t', '--title', help='Title of the book to lookup'),
            arg('-a', '--author', help='Author name to lookup'),
            arg('-y', '--year', help='Year of publication to lookup'))
def rename(args):
    """Print normalized file name using lookup info"""
    argmap = vars(args)
    engine, lookup_phrase = LookupEngine(), argmap.get('lookup')
    if lookup_phrase is None:
        t, a, y = (argmap.get(x) for x in ('title', 'author', 'year'))
        info = engine.info(t, a, y, raw=True)[0]
    else:
        info = engine.lookup(lookup_phrase, raw=True)[0]
    file = argmap.get('file')
    name = '{}_{}_{}{}'.format(
        '-'.join(info['title_suggest'].split(' ')),
        info['author_name'][0].split(' ')[-1],
        info['publish_year'][0],
        path.splitext(file)[1]
    ).lower()
    print(name)


# -------------------------------------------------------------------------------
# Libman logic
def parse_filename(filename):
    title, author, year = path.splitext(path.basename(filename))[0].split('_')
    return title.replace('-', ' '), author, year


class NotFoundError(Exception):

    """Error class for signalling book was not found"""

    def __init__(self, title, author=None, year=None):
        title_desc = "No books found for '{}'".format(title)
        author_desc = "" if author is None else " (author: {})".format(author)
        Exception.__init__(self, title_desc + author_desc)
        self.title, self.author, self.year = title, author, year


class LookupEngine:

    def __init__(self):
        self.base = 'http://openlibrary.org/search.json'

    def format_results(self, resp):
        keys = ('author_name', 'isbn', 'publish_year', 'publisher')
        return [(book['title_suggest'], '\n'.join([
            'author:    {}'.format(', '.join(book['author_name'])),
            'publisher: {}'.format(book['publisher'][0]),
            'ISBN:      {}'.format(book['isbn'][0]),
            'year:      {}'.format(book['publish_year'][0])
        ])) for book in resp.json()['docs'] if all(k in book for k in keys)]

    def lookup(self, query, raw=False):
        resp = requests.get(self.base, {'q': query})
        if int(resp.json()['num_found']) == 0:
            raise NotFoundError(query)
        return self.format_results(resp) if not raw else resp.json()['docs']

    def info(self, title, author=None, year=None, raw=False):
        params = {'title': title}
        if author is not None:
            params['author'] = author
        resp = requests.get(self.base, params)
        if int(resp.json()['num_found']) == 0:
            raise NotFoundError(title, author, year)
        return self.format_results(resp) if not raw else resp.json()['docs']


# ------------------------------------------------------------------------------
# main
if __name__ == "__main__":
    args = cli.parse_args()
    if args.subcommand is None:
        cli.print_help()
    else:
        args.func(args)
